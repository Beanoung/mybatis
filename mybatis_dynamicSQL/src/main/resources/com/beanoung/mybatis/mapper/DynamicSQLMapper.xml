<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.beanoung.mybatis.mapper.DynamicSQLMapper">

    <!-- sql标签
     实际开发很少用*,而是要把字段名写出来
     -->
    <sql id="empColumns">
        emp_id,emp_name,age,gender,dept_id
    </sql>
    <!-- 使用sql标签
     在sql语句中使用<include refid="empColumns"></include>
     -->

    <!-- void deleteMoreEmp(@Param("empIds") Integer[] empIds); -->
    <!-- 法1:关键字in -->
    <delete id="deleteMoreEmp">
        delete from t_emp where emp_id in
        <!-- 可以把括号写在foreach外面 -->
        <foreach collection="empIds" item="empId" separator="," open="(" close=")">
            #{empId}
        </foreach>
    </delete>
    <!-- 法2:关键字or -->
    <delete id="deleteMoreEmpOne">
        delete from t_emp where
        <foreach collection="empIds" item="empId" separator="or">
            emp_id = #{empId}
        </foreach>
    </delete>

    <!-- void insertMoreEmp(@Param("emps") List<Emp> emps); -->
    <insert id="insertMoreEmp">
        insert into t_emp values
        <foreach collection="emps" item="emp" separator=",">
            (null,#{emp.empName},#{emp.age},#{emp.gender},null)
        </foreach>
    </insert>

    <!-- List<Emp> getEmpByChoose(Emp emp); -->
    <!--
     choose,when,otherwise
     当一个when生效时,后面的when就没用了,所以没有and
     至少一个when,至多一个otherwise(所有when为false才添加其中语句,可以不设置)
     -->
    <select id="getEmpByChoose" resultType="Emp">
        select * from t_emp
        <where>
            <choose>
                <when test="empName !=null and empName !=''">
                    emp_name = #{empName}
                </when>
                <when test="age !=null and age !=''">
                    age = #{age}
                </when>
                <when test="gender !=null and gender !=''">
                    gender = #{gender}
                </when>
            </choose>
        </where>
    </select>


    <!-- List<Emp> getEmpByCondition(Emp emp); -->
    <!-- 法3 -->
    <select id="getEmpByConditionThree" resultType="Emp">
        select * from t_emp
        <trim prefix="where" suffixOverrides="and">
            <!--
            trim标签:
             prefix/suffix: 在标签内容前面/后面添加指定内容
             prefixOverrides/suffixOverrides: 在标签内容前面/后面去掉指定内容
             -->
            <if test="empName != null and empName != ''">
                emp_name = #{empName} and
            </if>
            <if test="age != null and age != ''">
                age = #{age} and
            </if>
            <if test="gender != null and gender != ''">
                gender = #{gender}
            </if>
        </trim>
    </select>
    <!-- 法2:where标签 -->
    <select id="getEmpByConditionTwo" resultType="Emp">
        select * from t_emp
        <where>
            <!--
             where标签:
             ①如果有条件成立,添加where关键字,如果全为假,则不生成
             ②会自动将标签中内容前多余的and去掉(如果按照上面trim标签的写法,后面多余的and where标签是不能去掉的)
             -->
            <if test="empName != null and empName != ''">
                emp_name = #{empName}
            </if>
            <if test="age != null and age != ''">
                and age = #{age}
            </if>
            <if test="gender != null and gender != ''">
                and gender = #{gender}
            </if>
        </where>
    </select>
    <!-- 法1:添加恒成立1=1 -->
    <select id="getEmpByConditionOne" resultType="Emp">
        select * from t_emp where 1=1
        <!--
        if标签里面的test属性的内容为true则拼接该标签内的内容到sql后
        两个临界条件,null和空字符串
         -->
        <if test="empName != null and empName != ''">
            and emp_name = #{empName}
        </if>
        <if test="age != null and age != ''">
            and age = #{age}
        </if>
        <if test="gender != null and gender != ''">
            and gender = #{gender}
        </if>
    </select>

</mapper>
